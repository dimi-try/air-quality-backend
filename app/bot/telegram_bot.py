import asyncio
import logging
import aiohttp
from worker import force_update_database
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from app.db.database import get_db
import app.db.crud as crud
import app.bot.messages as messages
from app.bot.utils import get_coordinates
from air_quality import get_city_by_coords, get_air_pollution_data, get_air_pollution_forecast
from config import TELEGRAM_BOT_TOKEN, AIR_QUALITY_CHECK_INTERVAL, TG_ADMIN_IDs
from datetime import datetime, time, timedelta

bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = ReplyKeyboardMarkup(
  keyboard=[
    [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞")],
    [KeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")]
  ],
  resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞
admin_keyboard = ReplyKeyboardMarkup(
  keyboard=[
    [KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã")],
  ],
  resize_keyboard=True
)

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command("start"))
async def start(message: Message):
  logging.info(f"[TELEGRAM BOT] /start –æ—Ç {message.from_user.id} message: {message.text}")
  coordinates = get_coordinates(message)
  print("coordinates: ", coordinates)

  if coordinates:
    try:            
      city = await get_city_by_coords(coordinates["lat"], coordinates["lon"])
      air_data = await get_air_pollution_data(coordinates["lat"], coordinates["lon"])
      current_aqi = air_data['list'][0]['main']['aqi']

      with get_db() as db:
        crud.create_or_update_subscription(
          db,
          tg_user=message.from_user,
          coordinates=coordinates,
          city=city,
          current_aqi=current_aqi
        )

        await message.answer(
          messages.MESSAGE_SAVE_SUBSCRIPTION + f"{city}",
          reply_markup=keyboard
        )

    except Exception as e:
      logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
      await message.answer(messages.MESSAGE_START_ERROR)

  else:
    await message.answer(messages.MESSAGE_COORDINATES_NOT_PROVIDED, reply_markup=keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /admin —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command("admin"))
async def start(message: Message):
  if message.from_user.id not in TG_ADMIN_IDs:
    await message.answer("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    return

  logging.info(f"[TELEGRAM BOT] /admin –æ—Ç {message.from_user.id}")
  await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Å–ø–æ–¥–∏–Ω!", reply_markup=admin_keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞")
async def check_air_quality(message: Message):
  try:
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    with get_db() as db:
      user = crud.get_subscription_by_telegram_id(db, telegram_id=message.from_user.id)
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
      if user:
        location = user.subscription.location
        air_data = await get_air_pollution_data(location.latitude, location.longitude)
        current_aqi = air_data['list'][0]['main']['aqi']
        await message.answer(f"–¢–µ–∫—É—â–∏–π AQI –¥–ª—è {location.city}: {current_aqi}", reply_markup=keyboard)
      else:
        await message.answer(messages.MESSAGE_COORDINATES_NOT_PROVIDED, reply_markup=keyboard)
  
  except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞: {e}")
    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.", reply_markup=keyboard)

@dp.message(lambda message: message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def unsubscribe(message: Message):
  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏
  with get_db() as db:
    success = crud.delete_subscription(db, telegram_id=message.from_user.id)
    if success:
      await message.answer(messages.USER_UNSUBSCRIBED)
    else:
      await message.answer(messages.USER_UNSUBSCRIBED_ERROR)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–π
@dp.message(lambda message: message.location is not None)
async def handle_location(message: Message):
  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  latitude = message.location.latitude
  longitude = message.location.longitude
  logging.info(f"[TELEGRAM BOT] –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: "
                f"–®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}")
  
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
  city = await get_city_by_coords(latitude, longitude)
  coordinates = {"lat": latitude, "lon": longitude}
  air_data = await get_air_pollution_data(latitude, longitude)
  current_aqi = air_data['list'][0]['main']['aqi']
  with get_db() as db:
    telegram_id = message.from_user.id
    crud.create_or_update_subscription(
      db,
      tg_user=message.from_user,
      coordinates=coordinates,
      city=city,
      current_aqi=current_aqi
    )
  # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π
  await message.answer(f"‚ô•Ô∏è –°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\nüìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {city}\nüè≠ –¢–µ–∫—É—â–∏–π AQI: {current_aqi}", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notifications():
  while True:
    now = datetime.now()
    next_8am = datetime.combine(now.date(), time(8)) + timedelta(days=(now.hour >= 8))
    next_8pm = datetime.combine(now.date(), time(20)) + timedelta(days=(now.hour >= 20))
    next_regular_notification_time = min(next_8am, next_8pm)

    try:
      with get_db() as db:
        users = crud.get_all_users(db)
        for user in users:
          previous_aqi = user.subscription.location.aqi
          user_city = user.subscription.location.city
          coordinates = {'lon': user.subscription.location.longitude, 'lat': user.subscription.location.latitude}

          air_data = await get_air_pollution_data(coordinates['lat'], coordinates['lon'])
          current_aqi = air_data['list'][0]['main']['aqi']
                    
          # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ AQI
          if previous_aqi and current_aqi != previous_aqi:
            trend = "—É—Ö—É–¥—à–µ–Ω–∏–µ üò∑‚òÅÔ∏è" if current_aqi > previous_aqi else "—É–ª—É—á—à–µ–Ω–∏–µ ‚ò∫Ô∏è‚òÄÔ∏è"
            crud.update_location_aqi(db, coordinates, current_aqi)
            await bot.send_message(
              user.id, 
              f"–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ {user_city} –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è {trend} –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.\nüè≠ –¢–µ–∫—É—â–∏–π AQI: {current_aqi}"
              )

          # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 6 —á–∞—Å–æ–≤ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          forecast_data = await get_air_pollution_forecast(coordinates['lat'], coordinates['lon'])
          forecast_aqi = [f['main']['aqi'] for f in forecast_data['list'][:6]]
          for i, forecast in enumerate(forecast_aqi):
            if abs(forecast - current_aqi) >= 2:
              trend = "—É—Ö—É–¥—à–µ–Ω–∏–µ üò∑‚òÅÔ∏è" if forecast > current_aqi else "—É–ª—É—á—à–µ–Ω–∏–µ ‚ò∫Ô∏è‚òÄÔ∏è"
              hours = (i + 1) * 1
              await bot.send_message(user.id, 
              f"–í–Ω–∏–º–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ {trend} –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ {user_city}.\nüè≠ –¢–µ–∫—É—â–∏–π AQI: {current_aqi} –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π AQI: {forecast}")
              break

          # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤ 8:00 –∏ 20:00)
          if now >= next_regular_notification_time:
            trend = "—É—Ö—É–¥—à–µ–Ω–∏–µ" if current_aqi >= 3 else "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
            await bot.send_message(user.id, f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ {user_city} {trend}. –¢–µ–∫—É—â–∏–π AQI: {current_aqi}")
            next_regular_notification_time += timedelta(hours=12)  # –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤

    except Exception as e:
      logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    await asyncio.sleep(AIR_QUALITY_CHECK_INTERVAL)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
@dp.message(lambda message: message.document is not None)
async def handle_csv_file(message: Message):
  if message.from_user.id not in TG_ADMIN_IDs:
    await message.answer("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    return
  
  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
  file_id = message.document.file_id
  file_info = await bot.get_file(file_id)
  file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
  # try:
  async with aiohttp.ClientSession() as session:
    async with session.get(file_url) as response:
      file_data = await response.text()
      csv_data = [line.split(',') for line in file_data.strip().split('\n')]
      with get_db() as db:
        locationsAdded = crud.add_locations_from_csv(db, csv_data)
        await message.answer(f"–£—Å–ø–µ—à–Ω–æ! –ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {locationsAdded} –º–µ—Å—Ç.")
      

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot():
  logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
  await bot.delete_webhook(drop_pending_updates=True)
  await dp.start_polling(bot)


